PRAGMA AnsiInForEmptyOrNullableItemsCollections;
PRAGMA yt.DefaultMaxJobFails = "1";
PRAGMA yson.DisableStrict;
PRAGMA yt.HybridDqExecution = "1";
-- PRAGMA yt.UseNativeYtTypes;
PRAGMA yt.InferSchema = '10';

DECLARE $input1 AS String;
DECLARE $input2 AS String;
DECLARE $output1 AS String;

$encode_geo = ($geo_id) -> (
    String::JoinFromList(
        ListExtract(
            ListFilter(
                ListMap(Geo::GetParents(UNWRAP(CAST($geo_id AS Int32) ?? 10000)), Geo::RegionById),
                ($geo) -> ($geo.type IN [2, 3, 4, 5, 6, 7, 8, 10, 13, 15])
            ),
            'native_name'
        ),
        ', '
    ) ?? "unk"
);

$encode_metro_station = ($metro_stations) -> {
    $limit = MIN_OF(1500, COALESCE(ListMin(ListExtract($metro_stations, 'distance')), 0) * 2);
    $stations = ListExtract(ListFilter($metro_stations, ($item) -> ($item.distance <= $limit)), 'name');
    RETURN IF(
        ListHasItems($stations),
        String::JoinFromList(ListMap($stations, ($name) -> ('Metro istasyonunun yakınında bulunur: ' || $name)), '\n') || '\n',
        ''
    );
};


$location_prefixes = {
    31313:      'Alışveriş merkezinde bulunur: ',
    31103:      'İş merkezinde bulunur: ',
    3493720369: 'Gıda pazarında bulunur: ',
    30751:      'Parkta bulunur: ',
    31321:      'Pazarda bulunur: ',
    3493720385: 'Pazarda bulunur: ',
    30755:      'Lunaparkta bulunur: ',
    31433:      'Gar’da bulunur: ',
    31298:      'Havalimanında bulunur: ',
};

$encode_geo_relations = ($relations) -> {
    $geo_relations = ListMap(
        ListFilter(
            $relations, 
            ($item) -> ($item.type == 'LocatedAt' AND $item.rubric_id IN $location_prefixes)
        ),
        ($item) -> ($location_prefixes[$item.rubric_id] || $item.name)
    );
    RETURN IF(ListHasItems($geo_relations), String::JoinFromList($geo_relations, ', '), '');
};

$dependence_prefixes = {
    30142:      'Hastanenin şubesidir: ',
    30309:      'Üniversitenin şubesidir: ',
    30141:      'Hastanenin şubesidir: ',
    30723:      'Okulun şubesidir: ',
    30114:      'Hastanenin şubesidir: ',
    30128:      'Hastanenin şubesidir: ',
    144152360:  'Hastanenin şubesidir: ',
    30068:      'Hastanenin şubesidir: ',
    30127:      'Hastanenin şubesidir: ',
    30069:      'Hastanenin şubesidir: ',
    30129:      'Hastanenin şubesidir: ',
    3501479437: 'Hastanenin şubesidir: ',
    30693:      'Kolejin şubesidir: ',
    3502225939: 'Hastanenin şubesidir: ',
};

$encode_dependence_relations = ($relations) -> {
    $dependence_relations = ListMap(
        ListFilter(
            $relations, 
            ($item) -> ($item.type == 'DepartmentOf' AND $item.rubric_id IN $dependence_prefixes)
        ),
        ($item) -> ($dependence_prefixes[$item.rubric_id] || $item.name)
    );
    RETURN String::JoinFromList($dependence_relations, ', ');
};

$encode_other_rubrics = ($rubrics, $main_rubric) -> (
    String::JoinFromList(
        ListMap(
            ListFilter(
                $rubrics, 
                ($rubric) -> ($rubric != $main_rubric)
            ),
            ($rubric) -> ('Başlık: ' || $rubric || '\n')
        ),
        ''
    )
);

$encode_url = ($url) -> {
    $host = Url::GetHost($url);
    $path = Url::GetPath($url);
    RETURN IF(
        $host IS NOT NULL AND $path == '/',
        'Kurumun sitesi: ' || $url || '\n',
        '' 
    );
};

$encode_phones = ($phones) -> (
    IF(
        $phones IS NOT NULL AND ListHasItems($phones),
        String::JoinFromList(
            ListMap(
                $phones, 
                ($phone) -> ('Kurumun telefonu: ' || $phone || '\n')
            ),
            ''
        ),
        ''
    )
);

$status_names = {
    'publish': 'Çalışıyor',
    'moved': 'Kurum taşındı',
    'temporarily_closed': 'Geçici olarak kapalı',
    'closed': 'Kapalı',
    'unchecked': 'Veri yok',
};

$encode_popularity = ($popularity_bin) -> (
    'Kurumun popülaritesi (10 üzerinden): ' || CAST((10 - COALESCE($popularity_bin, 10)) AS String) || '\n' 
);

$encode_names = ($names, $main_name, $limit) -> {
    $names = ListExtract(
        ListFilter(
            $names,
            ($item) -> ($item.name != $main_name AND $item.locale IN ['tr', 'en', 'ru'] AND $item.type IN ["main", "synonym"])
        ),
        'name'
    );
    RETURN ListFold(
        $names,
        '',
        ($name, $buffer) -> (IF(
                $name IS NULL OR Length($buffer) + Length($name) + 32u > $limit OR FIND($buffer, UNWRAP($name)) IS NOT NULL,
                $buffer,
                $buffer || '", "' || UNWRAP($name) || '' 
        ))
    ) || '"';
};

$format_web_search = ($web_info) -> {
    $json_parts = ListMap(
        $web_info,
        ($item) -> {
            $host = $item.host;
            $title = $item.title;
            $snippet = $item.snippet;
            
            -- Create a JSON object string for this item
            $json_item = 
                '\n\t{\n\t\t\"host\":\"' || String::ReplaceAll($host, '"', '\'') || 
                '\",\n\t\t\"title\":\"' || String::ReplaceAll($title, '"', '\'') || 
                '\",\n\t\t\"snippet\":\"' || String::ReplaceAll($snippet, '"', '\'') || '\"\n\t}';
            RETURN $json_item;
        }
    );
    RETURN '[' || String::JoinFromList($json_parts, ',') || '\n]'
};

$clean_review = ($text) -> (
    COALESCE(
        String::Collapse(
            String::ReplaceAll(
              String::ReplaceAll(
                String::ReplaceAll(
                    String::ReplaceAll(
                        UNWRAP($text), 
                        "\"", ""
                    ),
                    "'", ""
                ),
                "\n", " "
            ), "\u202d", ""),
        ),
        ""
    )
);

$encode_reviews = ($reviews, $one_review_limit, $all_reviews_limit) -> {
   RETURN IF(
        $reviews IS NULL,
        '',
        "\n\t\"" || 
        String::JoinFromList(
            -- Process reviews with length limiting
            ListFold(
                $reviews,
                <|
                    reviews: CAST([] AS List<String>),
                    total_len: CAST(0 AS Uint32)
                |>,
                -- Accumulator function for ListReduce
                ($item, $acc) -> {
                    $total_len = COALESCE(CAST($acc.total_len AS Uint32), 0);
                    $current_len = LENGTH($item);
                    $new_len = $total_len + $current_len;
                    
                    RETURN IF(
                        $new_len <= $all_reviews_limit,
                        <|
                            reviews: ListFlatten([$acc.reviews, [$item]]),
                            total_len: $new_len
                        |>,
                        $acc
                    )
                },
            ).reviews,
            "\",\n\t\""
        ) || 
        "\"\n    "
    )
};

$insert_info = ($instruction, $user_request, $user_region, $request_kind, $main_name, $org_names, $activity_class, $address, $chain, $relations, $features, $rubrics, $reviews, $work_time, $rating, $web_info) -> {
    $user_request = $clean_review($user_request);
    -- $user_region = $encode_geo($user_region);
    -- $user_region = IF($user_region == '', "Turkey", $user_region);
    $user_region_str = String::JoinFromList(ListMap(ListFilter(ListMap(Geo::GetParents($user_region), ($x) -> { RETURN Geo::RegionById($x);}), ($x) -> { RETURN $x.type >= 3; }), ($x) -> {RETURN $x.en_name;}), ", ");
    $instruction = String::ReplaceLast($instruction, "{request}", $user_request);
    $instruction = String::ReplaceLast($instruction, "{user_region_string}", $user_region_str);
    --$instruction = String::ReplaceLast($instruction, "{request_kind}", $request_kind); 

    $web_info_string = IF($web_info IS NULL, "[]", $format_web_search(UNWRAP($web_info)));
    $instruction = String::ReplaceLast($instruction, "{web-search-results}", $web_info_string);   

    $main_name = COALESCE($main_name, $org_names[0].name);
    $org_names = '"' || $main_name || $encode_names($org_names, $main_name, 500);
    $org_names = String::ReplaceAll(COALESCE(CAST($org_names AS String), ""), "\u202d", "");
    -- relations
    $dependance_relations_string = COALESCE($encode_dependence_relations($relations), "");
    $geo_relations = COALESCE($encode_geo_relations($relations), "");
    $relations_all = IF(
        $geo_relations != "", 
        $geo_relations || ', ', 
        ""
    ) || $dependance_relations_string;

    $process_features = ($features) -> {
        $feature_dict = (
            String::JoinFromList(ListMap(
                $features,
                ($feature) -> {
                    $name = Yson::LookupString($feature, "feature_name");
                    $value = IF(
                        Yson::LookupString($feature, "value") IS NOT NULL,
                        IF(Yson::LookupString($feature, "value") == "1", "yes", "no"),
                        "[\"" || String::JoinFromList(ListTake(Yson::ConvertToStringList(Yson::Lookup($feature, "enum_values")), 20), "\", ") || "\"]"
                    );
                    RETURN "\"" || $name || "\": " || $value;
                }
            ), ",\n")
        );
        RETURN $feature_dict;
    };

    $instruction = String::ReplaceLast($instruction, "{org_names}", $org_names);
    $instruction = String::ReplaceLast($instruction, "{address}", $address);
    $instruction = String::ReplaceLast($instruction, "{activity_class}", $activity_class);

    $features_string = $process_features($features);

    $chain_string = IF($chain IS NOT NULL, "\"ağı\": \"" || $chain || "\"", "");
    $chain_string = IF($chain_string != "" AND $features_string != "", $chain_string || ", ", $chain_string);
    $features_string = UNWRAP($chain_string) || UNWRAP($features_string);

    $rating_string = IF($rating IS NOT NULL, "\"rating\": \"" || CAST($rating/2 AS String)|| "\"", "");
    $rating_string = IF($rating_string != "" AND $features_string != "", $rating_string || ", ", $rating_string);
    $features_string = UNWRAP($rating_string) || UNWRAP($features_string);

    $time_string = IF($work_time IS NOT NULL AND $work_time != "", "\"work_time\": \"" || $work_time || "\"", "");
    $time_string = IF($features_string != "" AND $time_string != "", $time_string || ", " , $time_string);
    $features_string = UNWRAP($time_string) || UNWRAP($features_string);

    $rubric_string = '"' || String::JoinFromList(ListTake(
        ListMap(COALESCE($rubrics, []), ($text) -> (COALESCE($text, ""))), 10), "\", \"") || '"';
    $review_string = $encode_reviews($reviews, 800, 3000);
    $instruction = String::ReplaceLast($instruction, "{features}", $features_string);
    $instruction = String::ReplaceLast($instruction, "{rubrics}", $rubric_string);
    $instruction = String::ReplaceLast($instruction, "{reviews}", $review_string);
    $instruction = String::ReplaceLast($instruction, "{relations}", $relations_all);

    RETURN $instruction;
};

INSERT INTO $output1
SELECT
    $insert_info(
        FileContent("input_structure.txt"),
        data.text,
        CAST(regionId AS Int32),
        UNWRAP(label ?? "other"),
        main_name,
        all_names, -- change it
        COALESCE(activity_class, "unk"),
        COALESCE(address, ""),
        chain_name,
        relations,
        features,
        rubrics,
        Yson::ConvertToStringList(COALESCE(rag_comments.top_results, Yson::From([]))),
        NULL,
        rating,
        docs
    ) AS instruction,
    data.* WITHOUT IF EXISTS data.instruction
FROM $input1 AS data
LEFT JOIN $input2 AS rag_comments
ON (data.id == rag_comments.row_id)
WHERE main_name IS NOT NULL OR ListLength(all_names) != 0;